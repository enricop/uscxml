// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JSON.proto

#ifndef PROTOBUF_JSON_2eproto__INCLUDED
#define PROTOBUF_JSON_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>


#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_JSON_2eproto();
void protobuf_AssignDesc_JSON_2eproto();
void protobuf_ShutdownFile_JSON_2eproto();

class JSONProto;

// ===================================================================

class JSONProto : public ::google::protobuf::Message {
public:
	JSONProto();
	virtual ~JSONProto();

	JSONProto(const JSONProto& from);

	inline JSONProto& operator=(const JSONProto& from) {
		CopyFrom(from);
		return *this;
	}

	inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
		return _unknown_fields_;
	}

	inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
		return &_unknown_fields_;
	}

	static const ::google::protobuf::Descriptor* descriptor();
	static const JSONProto& default_instance();

	void Swap(JSONProto* other);

	// implements Message ----------------------------------------------

	JSONProto* New() const;
	void CopyFrom(const ::google::protobuf::Message& from);
	void MergeFrom(const ::google::protobuf::Message& from);
	void CopyFrom(const JSONProto& from);
	void MergeFrom(const JSONProto& from);
	void Clear();
	bool IsInitialized() const;

	int ByteSize() const;
	bool MergePartialFromCodedStream(
	    ::google::protobuf::io::CodedInputStream* input);
	void SerializeWithCachedSizes(
	    ::google::protobuf::io::CodedOutputStream* output) const;
	::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
	int GetCachedSize() const {
		return _cached_size_;
	}
private:
	void SharedCtor();
	void SharedDtor();
	void SetCachedSize(int size) const;
public:

	::google::protobuf::Metadata GetMetadata() const;

	// nested types ----------------------------------------------------

	// accessors -------------------------------------------------------

	// repeated .JSONProto compound = 1;
	inline int compound_size() const;
	inline void clear_compound();
	static const int kCompoundFieldNumber = 1;
	inline const ::JSONProto& compound(int index) const;
	inline ::JSONProto* mutable_compound(int index);
	inline ::JSONProto* add_compound();
	inline const ::google::protobuf::RepeatedPtrField< ::JSONProto >&
	compound() const;
	inline ::google::protobuf::RepeatedPtrField< ::JSONProto >*
	mutable_compound();

	// optional string key = 2;
	inline bool has_key() const;
	inline void clear_key();
	static const int kKeyFieldNumber = 2;
	inline const ::std::string& key() const;
	inline void set_key(const ::std::string& value);
	inline void set_key(const char* value);
	inline void set_key(const char* value, size_t size);
	inline ::std::string* mutable_key();
	inline ::std::string* release_key();
	inline void set_allocated_key(::std::string* key);

	// optional string atom = 3;
	inline bool has_atom() const;
	inline void clear_atom();
	static const int kAtomFieldNumber = 3;
	inline const ::std::string& atom() const;
	inline void set_atom(const ::std::string& value);
	inline void set_atom(const char* value);
	inline void set_atom(const char* value, size_t size);
	inline ::std::string* mutable_atom();
	inline ::std::string* release_atom();
	inline void set_allocated_atom(::std::string* atom);

	// optional bool verbatim = 4;
	inline bool has_verbatim() const;
	inline void clear_verbatim();
	static const int kVerbatimFieldNumber = 4;
	inline bool verbatim() const;
	inline void set_verbatim(bool value);

	// @@protoc_insertion_point(class_scope:JSONProto)
private:
	inline void set_has_key();
	inline void clear_has_key();
	inline void set_has_atom();
	inline void clear_has_atom();
	inline void set_has_verbatim();
	inline void clear_has_verbatim();

	::google::protobuf::UnknownFieldSet _unknown_fields_;

	::google::protobuf::RepeatedPtrField< ::JSONProto > compound_;
	::std::string* key_;
	::std::string* atom_;
	bool verbatim_;

	mutable int _cached_size_;
	::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

	friend void  protobuf_AddDesc_JSON_2eproto();
	friend void protobuf_AssignDesc_JSON_2eproto();
	friend void protobuf_ShutdownFile_JSON_2eproto();

	void InitAsDefaultInstance();
	static JSONProto* default_instance_;
};
// ===================================================================


// ===================================================================

// JSONProto

// repeated .JSONProto compound = 1;
inline int JSONProto::compound_size() const {
	return compound_.size();
}
inline void JSONProto::clear_compound() {
	compound_.Clear();
}
inline const ::JSONProto& JSONProto::compound(int index) const {
	return compound_.Get(index);
}
inline ::JSONProto* JSONProto::mutable_compound(int index) {
	return compound_.Mutable(index);
}
inline ::JSONProto* JSONProto::add_compound() {
	return compound_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::JSONProto >&
JSONProto::compound() const {
	return compound_;
}
inline ::google::protobuf::RepeatedPtrField< ::JSONProto >*
JSONProto::mutable_compound() {
	return &compound_;
}

// optional string key = 2;
inline bool JSONProto::has_key() const {
	return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JSONProto::set_has_key() {
	_has_bits_[0] |= 0x00000002u;
}
inline void JSONProto::clear_has_key() {
	_has_bits_[0] &= ~0x00000002u;
}
inline void JSONProto::clear_key() {
	if (key_ != &::google::protobuf::internal::kEmptyString) {
		key_->clear();
	}
	clear_has_key();
}
inline const ::std::string& JSONProto::key() const {
	return *key_;
}
inline void JSONProto::set_key(const ::std::string& value) {
	set_has_key();
	if (key_ == &::google::protobuf::internal::kEmptyString) {
		key_ = new ::std::string;
	}
	key_->assign(value);
}
inline void JSONProto::set_key(const char* value) {
	set_has_key();
	if (key_ == &::google::protobuf::internal::kEmptyString) {
		key_ = new ::std::string;
	}
	key_->assign(value);
}
inline void JSONProto::set_key(const char* value, size_t size) {
	set_has_key();
	if (key_ == &::google::protobuf::internal::kEmptyString) {
		key_ = new ::std::string;
	}
	key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JSONProto::mutable_key() {
	set_has_key();
	if (key_ == &::google::protobuf::internal::kEmptyString) {
		key_ = new ::std::string;
	}
	return key_;
}
inline ::std::string* JSONProto::release_key() {
	clear_has_key();
	if (key_ == &::google::protobuf::internal::kEmptyString) {
		return NULL;
	} else {
		::std::string* temp = key_;
		key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
		return temp;
	}
}
inline void JSONProto::set_allocated_key(::std::string* key) {
	if (key_ != &::google::protobuf::internal::kEmptyString) {
		delete key_;
	}
	if (key) {
		set_has_key();
		key_ = key;
	} else {
		clear_has_key();
		key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
	}
}

// optional string atom = 3;
inline bool JSONProto::has_atom() const {
	return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JSONProto::set_has_atom() {
	_has_bits_[0] |= 0x00000004u;
}
inline void JSONProto::clear_has_atom() {
	_has_bits_[0] &= ~0x00000004u;
}
inline void JSONProto::clear_atom() {
	if (atom_ != &::google::protobuf::internal::kEmptyString) {
		atom_->clear();
	}
	clear_has_atom();
}
inline const ::std::string& JSONProto::atom() const {
	return *atom_;
}
inline void JSONProto::set_atom(const ::std::string& value) {
	set_has_atom();
	if (atom_ == &::google::protobuf::internal::kEmptyString) {
		atom_ = new ::std::string;
	}
	atom_->assign(value);
}
inline void JSONProto::set_atom(const char* value) {
	set_has_atom();
	if (atom_ == &::google::protobuf::internal::kEmptyString) {
		atom_ = new ::std::string;
	}
	atom_->assign(value);
}
inline void JSONProto::set_atom(const char* value, size_t size) {
	set_has_atom();
	if (atom_ == &::google::protobuf::internal::kEmptyString) {
		atom_ = new ::std::string;
	}
	atom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JSONProto::mutable_atom() {
	set_has_atom();
	if (atom_ == &::google::protobuf::internal::kEmptyString) {
		atom_ = new ::std::string;
	}
	return atom_;
}
inline ::std::string* JSONProto::release_atom() {
	clear_has_atom();
	if (atom_ == &::google::protobuf::internal::kEmptyString) {
		return NULL;
	} else {
		::std::string* temp = atom_;
		atom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
		return temp;
	}
}
inline void JSONProto::set_allocated_atom(::std::string* atom) {
	if (atom_ != &::google::protobuf::internal::kEmptyString) {
		delete atom_;
	}
	if (atom) {
		set_has_atom();
		atom_ = atom;
	} else {
		clear_has_atom();
		atom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
	}
}

// optional bool verbatim = 4;
inline bool JSONProto::has_verbatim() const {
	return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JSONProto::set_has_verbatim() {
	_has_bits_[0] |= 0x00000008u;
}
inline void JSONProto::clear_has_verbatim() {
	_has_bits_[0] &= ~0x00000008u;
}
inline void JSONProto::clear_verbatim() {
	verbatim_ = false;
	clear_has_verbatim();
}
inline bool JSONProto::verbatim() const {
	return verbatim_;
}
inline void JSONProto::set_verbatim(bool value) {
	set_has_verbatim();
	verbatim_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_JSON_2eproto__INCLUDED
