/**
 *  @file
 *  @author     This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *  @copyright  Simplified BSD
 *
 *  @cond
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the FreeBSD license as published by the FreeBSD
 *  project.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *  You should have received a copy of the FreeBSD license along with this
 *  program. If not, see <http://www.opensource.org/licenses/bsd-license>.
 *  @endcond
 */


#ifndef V8DataView_h
#define V8DataView_h

#include <string>
#include "../../TypedArray.h"
#include "DOM/Node.hpp"
#include "V8ArrayBufferView.h"
#include "string"
#include "uscxml/plugins/datamodel/ecmascript/v8/V8DOM.h"
#include <v8.h>

namespace Arabica {
namespace DOM {

class V8DataView {
public:
	struct V8DataViewPrivate {
		V8DOM* dom;
		uscxml::DataView* nativeObj;
	};

	V8_DESTRUCTOR(V8DataViewPrivate);
	static bool hasInstance(v8::Handle<v8::Value>);

	static v8::Handle<v8::Value> getInt8Callback(const v8::Arguments&);
	static v8::Handle<v8::Value> getUint8Callback(const v8::Arguments&);
	static v8::Handle<v8::Value> getInt16Callback(const v8::Arguments&);
	static v8::Handle<v8::Value> getUint16Callback(const v8::Arguments&);
	static v8::Handle<v8::Value> getInt32Callback(const v8::Arguments&);
	static v8::Handle<v8::Value> getUint32Callback(const v8::Arguments&);
	static v8::Handle<v8::Value> getFloat32Callback(const v8::Arguments&);
	static v8::Handle<v8::Value> getFloat64Callback(const v8::Arguments&);
	static v8::Handle<v8::Value> setInt8Callback(const v8::Arguments&);
	static v8::Handle<v8::Value> setUint8Callback(const v8::Arguments&);
	static v8::Handle<v8::Value> setInt16Callback(const v8::Arguments&);
	static v8::Handle<v8::Value> setUint16Callback(const v8::Arguments&);
	static v8::Handle<v8::Value> setInt32Callback(const v8::Arguments&);
	static v8::Handle<v8::Value> setUint32Callback(const v8::Arguments&);
	static v8::Handle<v8::Value> setFloat32Callback(const v8::Arguments&);
	static v8::Handle<v8::Value> setFloat64Callback(const v8::Arguments&);


	static v8::Handle<v8::Value> constructor(const v8::Arguments&);
	static v8::Persistent<v8::FunctionTemplate> Constr;
	static v8::Handle<v8::FunctionTemplate> getConstructor() {
		if (Constr.IsEmpty()) {
			v8::Handle<v8::FunctionTemplate> constr = v8::FunctionTemplate::New(constructor);
			Constr = v8::Persistent<v8::FunctionTemplate>::New(constr);
		}
		return Constr;
	}

	static v8::Persistent<v8::FunctionTemplate> Tmpl;
	static v8::Handle<v8::FunctionTemplate> getTmpl() {
		if (Tmpl.IsEmpty()) {
			v8::Handle<v8::FunctionTemplate> tmpl = v8::FunctionTemplate::New();
			tmpl->SetClassName(v8::String::New("DataView"));
			tmpl->ReadOnlyPrototype();

			v8::Local<v8::ObjectTemplate> instance = tmpl->InstanceTemplate();
			v8::Local<v8::ObjectTemplate> prototype = tmpl->PrototypeTemplate();
			(void)prototype; // surpress unused warnings

			instance->SetInternalFieldCount(1);


			prototype->Set(v8::String::NewSymbol("getInt8"),
			               v8::FunctionTemplate::New(V8DataView::getInt8Callback, v8::Undefined()), static_cast<v8::PropertyAttribute>(v8::DontDelete));
			prototype->Set(v8::String::NewSymbol("getUint8"),
			               v8::FunctionTemplate::New(V8DataView::getUint8Callback, v8::Undefined()), static_cast<v8::PropertyAttribute>(v8::DontDelete));
			prototype->Set(v8::String::NewSymbol("getInt16"),
			               v8::FunctionTemplate::New(V8DataView::getInt16Callback, v8::Undefined()), static_cast<v8::PropertyAttribute>(v8::DontDelete));
			prototype->Set(v8::String::NewSymbol("getUint16"),
			               v8::FunctionTemplate::New(V8DataView::getUint16Callback, v8::Undefined()), static_cast<v8::PropertyAttribute>(v8::DontDelete));
			prototype->Set(v8::String::NewSymbol("getInt32"),
			               v8::FunctionTemplate::New(V8DataView::getInt32Callback, v8::Undefined()), static_cast<v8::PropertyAttribute>(v8::DontDelete));
			prototype->Set(v8::String::NewSymbol("getUint32"),
			               v8::FunctionTemplate::New(V8DataView::getUint32Callback, v8::Undefined()), static_cast<v8::PropertyAttribute>(v8::DontDelete));
			prototype->Set(v8::String::NewSymbol("getFloat32"),
			               v8::FunctionTemplate::New(V8DataView::getFloat32Callback, v8::Undefined()), static_cast<v8::PropertyAttribute>(v8::DontDelete));
			prototype->Set(v8::String::NewSymbol("getFloat64"),
			               v8::FunctionTemplate::New(V8DataView::getFloat64Callback, v8::Undefined()), static_cast<v8::PropertyAttribute>(v8::DontDelete));
			prototype->Set(v8::String::NewSymbol("setInt8"),
			               v8::FunctionTemplate::New(V8DataView::setInt8Callback, v8::Undefined()), static_cast<v8::PropertyAttribute>(v8::DontDelete));
			prototype->Set(v8::String::NewSymbol("setUint8"),
			               v8::FunctionTemplate::New(V8DataView::setUint8Callback, v8::Undefined()), static_cast<v8::PropertyAttribute>(v8::DontDelete));
			prototype->Set(v8::String::NewSymbol("setInt16"),
			               v8::FunctionTemplate::New(V8DataView::setInt16Callback, v8::Undefined()), static_cast<v8::PropertyAttribute>(v8::DontDelete));
			prototype->Set(v8::String::NewSymbol("setUint16"),
			               v8::FunctionTemplate::New(V8DataView::setUint16Callback, v8::Undefined()), static_cast<v8::PropertyAttribute>(v8::DontDelete));
			prototype->Set(v8::String::NewSymbol("setInt32"),
			               v8::FunctionTemplate::New(V8DataView::setInt32Callback, v8::Undefined()), static_cast<v8::PropertyAttribute>(v8::DontDelete));
			prototype->Set(v8::String::NewSymbol("setUint32"),
			               v8::FunctionTemplate::New(V8DataView::setUint32Callback, v8::Undefined()), static_cast<v8::PropertyAttribute>(v8::DontDelete));
			prototype->Set(v8::String::NewSymbol("setFloat32"),
			               v8::FunctionTemplate::New(V8DataView::setFloat32Callback, v8::Undefined()), static_cast<v8::PropertyAttribute>(v8::DontDelete));
			prototype->Set(v8::String::NewSymbol("setFloat64"),
			               v8::FunctionTemplate::New(V8DataView::setFloat64Callback, v8::Undefined()), static_cast<v8::PropertyAttribute>(v8::DontDelete));


			tmpl->Inherit(V8ArrayBufferView::getTmpl());
			Tmpl = v8::Persistent<v8::FunctionTemplate>::New(tmpl);
		}
		return Tmpl;
	}


};

}
}

#endif // V8DataView_h
