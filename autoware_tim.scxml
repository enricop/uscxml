<?xml version="1.0" encoding="UTF-8"?>
<scxml	version="1.0"
	name="0"
	datamodel="xpath"
	initial="InterpreterInitialization"
	xmlns="http://www.w3.org/2005/07/scxml" >
<datamodel>
	<data id="WRITE0">
	   <frame xmlns="">
		<data type="wrapperProgram" index="0">
		    <nestedData type="numWorking">33</nestedData>
		</data>
	   </frame>
	</data>
	<data id="READ0">
	   <frame xmlns="">
	       <data type="requestItem" index="0">totalPacks</data>
	   </frame>
	</data>
	<data id="WRITE1">
	   <frame xmlns="">
		<data type="operativeMode" index="1">
		 <item i="0">
		    <nestedData type="state">off</nestedData>
		 </item>
		 <item i="1">
		    <nestedData type="state">on</nestedData>
		 </item>         
		 <item i="2">
		    <nestedData type="state">off</nestedData>
		 </item>         
		 <item i="3">
		    <nestedData type="state">off</nestedData>
		 </item>
		</data>
	   </frame>
	</data>
	<data id="READ1">
	   <frame xmlns="">
	       <data type="requestItem" index="1">switchHw</data>
	   </frame>
	</data>
	<data id="WRITE3">
	   <frame xmlns="">
		<data type="setting" index="3">
		 <item i="0">
		    <nestedData type="value">0</nestedData>
		 </item>
		 <item i="1">
		    <nestedData type="value">0</nestedData>
		 </item>    
		 <item i="2">
		    <nestedData type="value">33</nestedData>
		 </item>
		 <item i="3">
		    <nestedData type="value">55</nestedData>
		 </item>
		 <item i="4">
		    <nestedData type="value">44</nestedData>
		 </item>             
		 <item i="5">
		    <nestedData type="value">55</nestedData>
		 </item>
		</data>
	   </frame>
	</data>
	<data id="READ3">
	   <frame xmlns="">
	       <data type="requestItem" index="0">information</data>
	   </frame>
	</data>
	<data id="WRITE4">
	   <frame xmlns="">
		<data type="function" index="4">
		 <item i="0">
		    <nestedData type="state">off</nestedData>
		 </item>
		 <item i="1">
		    <nestedData type="state">on</nestedData>
		 </item>         
		 <item i="2">
		    <nestedData type="state">on</nestedData>
		 </item>
		</data>
	   </frame>
	</data>
	<data id="iterator">
		<replaceme/>
	</data>
	<data id="numRiga">
		<replaceme/>
	</data>
</datamodel>
<!-- legend:
	init<id>
	ready<id>
	reply<id>
	cmd<id>
	ack<id>
-->
<state id="InterpreterInitialization">
<initial>
<!--		<file url="foo.bin" operation="read" type="xml" callback="foo.bin" />-->
<!--		<file url="bar.bin" operation="write" type="xml" contentexpr="_event['data']['content']" />-->
	<transition target="RunCommandsStateMachines" />
</initial>
<invoke type="xmlbridge" id="xmlbridge0">
	<!-- id index must be the exact MES datablock id used in the SCXML 'name' tag and in CSV config file -->
	<param name="timeout" expr="'5'"/>
</invoke>
<parallel id="RunCommandsStateMachines">
	<state id="0" initial="init0">
		<state id="init0">
			<transition event="0_wReq" target="sent0">
				<assign location="$WRITE0/frame/data/nestedData" expr="$_event/data/text()"/>
				<send 	event="0_wCmd"
					namelist="$WRITE0"
					target="#_xmlbridge0"/>
			</transition>
			<transition event="0_rReq" target="sent0">
				<send 	event="0_rCmd"
					namelist="$READ0"
					target="#_xmlbridge0"/>
			</transition>
		</state>
		<state id="sent0">
			<transition event="0_wReply" target="init0">
				<if cond="$_event/data/data/nestedData[@type='state']/text() = 'ok'">
					<send 	event="0_wAck" target="#_xmlbridge0"/>
				<elseif/>
					<send 	event="0__Err" target="#_xmlbridge0"/>
				</if>
			</transition>
			<transition event="0_rReply" target="init0">
				<if cond="$_event/data/frame/data/text()">
					<send 	event="0_rAck"
						namelist="$_event/data/frame/data/text()"
						target="#_xmlbridge0"/>
				<else/>
					<send 	event="0__Err" target="#_xmlbridge0"/>
				</if>
			</transition>
			<transition event="timeout0" target="init0">
				<send 	event="0__Err" target="#_xmlbridge0"/>
			</transition>
			<transition event="error0" target="init0">
				<send 	event="0__Err" target="#_xmlbridge0"/>
			</transition>
		</state>
	</state>
	<state id="1" initial="init1">
		<state id="init1">
			<transition event="1_rReq" target="sent1">
				<send 	event="1_rCmd"
					namelist="$READ1"
					target="#_xmlbridge0"/>
			</transition>
			<transition event="1_wReq" target="sent1">
				<foreach array="tokenize($_event/data/text(), ',')" item="$iterator" index="numRiga">
					<assign location="$WRITE1/frame/data/item[@i=$numRiga]/nestedData" expr="$iterator"/>
				</foreach>
				<send 	event="1_wCmd"
					namelist="$WRITE1"
					target="#_xmlbridge0"/>
			</transition>
		</state>
		<state id="sent1">
			<transition event="1_wReply" target="init1">
				<if cond="$_event/data/data/nestedData[@type='state']/text() = 'ok'">
					<send 	event="1_wAck" target="#_xmlbridge0"/>
				<elseif/>
					<send 	event="1__Err" target="#_xmlbridge0"/>
				</if>
			</transition>
			<transition event="1_rReply"  target="init1">
				<if cond="$_event/data/frame/data/text()">
					<send 	event="1_rAck"
						namelist="$_event/data/frame/data/item/nestedData[@type='state']/text()"
						target="#_xmlbridge0"/>
				<else/>
					<send 	event="1_rErr"
						target="#_xmlbridge0"/>
				</if>
			</transition>
			<transition event="timeout1" target="init1" />
			<transition event="error1" target="init1" />
		</state>
	</state>
	<state id="2" initial="init2">
		<state id="init2">
			<transition event="2_rReq" target="sent2">
				<send 	event="2_rCmd"
					namelist="$READ2"
					target="#_xmlbridge0"/>
			</transition>
			<transition event="2_wReq" target="sent2">
				<foreach array="tokenize($_event/data/text(), ',')" item="$iterator" index="numRiga">
					<assign location="$WRITE2/frame/data/item[@i=$numRiga]/nestedData" expr="$iterator"/>
				</foreach>
				<send 	event="2_wCmd"
					namelist="$WRITE2"
					target="#_xmlbridge0"/>
			</transition>
		</state>
		<state id="sent2">
			<transition event="2_wReply" target="init2">
				<if cond="$_event/data/data/nestedData[@type='state']/text() = 'ok'">
					<send 	event="2_wAck" target="#_xmlbridge0"/>
				<elseif/>
					<send 	event="2__Err" target="#_xmlbridge0"/>
				</if>
			</transition>
			<transition event="2_rReply"  target="init2">
				<if cond="$_event/data/frame/data/text()">
					<send 	event="2_rAck"
						namelist="$_event/data/frame/data/item/nestedData[@type='state']/text()"
						target="#_xmlbridge0"/>
				<else/>
					<send 	event="2_rErr"
						target="#_xmlbridge0"/>
				</if>
			</transition>
			<transition event="timeout2" target="init2" />
			<transition event="error2" target="init2" />
		</state>
	</state>
	<state id="3" initial="init3">
		<state id="init3">
			<transition event="3_rReq" target="sent3">
				<send 	event="3_rCmd"
					namelist="$READ3"
					target="#_xmlbridge0"/>
			</transition>
			<transition event="3_wReq" target="sent3">
				<foreach array="$_event/data/data/text()" item="iterator" index="numRiga">
					<assign location="$WRITE3/frame/data/item[@i=$numRiga]/nestedData" expr="$iterator"/>
				</foreach>
				<send 	event="3_wCmd"
					namelist="$WRITE3"
					target="#_xmlbridge0"/>
			</transition>
		</state>
		<state id="sent3">
			<transition event="3_wReply" target="init3">
				<if cond="$_event/data/data/nestedData[@type='state']/text() = 'ok'">
					<send 	event="3_wAck" target="#_xmlbridge0"/>
				<elseif/>
					<send 	event="3__Err" target="#_xmlbridge0"/>
				</if>
			</transition>
			<transition event="3_rReply"  target="init3">
				<if cond="$_event/data/frame/data">
					<send 	event="3_rAck"
						namelist="$_event/data/frame/data/item/nestedData[@type='value']/text()"
						target="#_xmlbridge0"/>
				<else/>
					<send 	event="3_rErr"
						target="#_xmlbridge0"/>
				</if>
			</transition>
			<transition event="timeout3" target="init3" />
			<transition event="error3" target="init3" />
		</state>
	</state>	
</parallel>
</state>
<final id="EXIT">
	<log label="Unrecoverable Error" expr="$_event/text()" />
</final>
</scxml>


<!--

Functions and operators

XPath 1.0 defines four data types: node-sets (sets of nodes with no intrinsic order), strings, numbers and booleans.

The available operators are:

    The "/", "//" and "[...]" operators, used in path expressions, as described above.
    A union operator, "|", which forms the union of two node-sets.
    Boolean operators "and" and "or", and a function "not()"
    Arithmetic operators "+", "-", "*", "div" (divide), and "mod"
    Comparison operators "=", "!=", "<", ">", "<=", ">="

The function library includes:

    Functions to manipulate strings: concat(), substring(), contains(), substring-before(), substring-after(), translate(), normalize-space(), string-length()
    Functions to manipulate numbers: sum(), round(), floor(), ceiling()
    Functions to get properties of nodes: name(), local-name(), namespace-uri()
    Functions to get information about the processing context: position(), last()
    Type conversion functions: string(), number(), boolean()


-->
