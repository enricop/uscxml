<?xml version="1.0" encoding="UTF-8"?>
<scxml	version="1.0"
	name="10.1.30.150:3000"
	datamodel="xpath"
	initial="RunCommandsStateMachines"
	xmlns="http://www.w3.org/2005/07/scxml" 
	xmlns:fn="http://www.w3.org/2005/xpath-functions">

<parallel id="RunCommandsStateMachines">
	<state id="0" initial="init0">
		<invoke type="xmlbridge" id="xmlbridge0">
			<param name="timeout" expr="'5'"/>
		</invoke>
		<state id="init0">
			<transition event="0_wREQ" target="sent0">
				<send 	event="wCMD"
					target="#_xmlbridge0">
					<content>
					<frame>
						<data type="startWrapping" index="0">
							<nestedData type="state">${$_event/data/value/text()}</nestedData>
						</data>
					</frame>
					</content>
				</send>
			</transition>
			<transition event="0_rREQ" target="sent0">
				<send 	event="rCMD"
					target="#_xmlbridge0">
					<content>
					<frame>
						<data type="requestItem" index="0">startWrapping</data>
					</frame>
					</content>
				</send>
			</transition>
		</state>
		<state id="sent0">
			<transition event="0_wREPLY" target="init0">
				<if cond="$_event/data/frame/data/nestedData[@type='state']/text() = 'ok'">
					<send 	event="wACK" target="#_xmlbridge0"/>
				<elseif/>
					<send 	event="wERR" target="#_xmlbridge0"/>
				</if>
			</transition>
			<transition event="0_rREPLY" target="init0">
				<if cond="$_event/data/frame">
					<send 	event="rACK"
						namelist="$_event/data/frame/data/nestedData[@type='modifyEnabled']/text()"
						target="#_xmlbridge0"/>
				<else/>
					<send 	event="rERR" target="#_xmlbridge0"/>
				</if>
			</transition>
			<transition event="timeout0" target="init0">
				<send 	event="_ERR" target="#_xmlbridge0"/>
			</transition>
			<transition event="error0" target="init0">
				<send 	event="_ERR" target="#_xmlbridge0"/>
			</transition>
		</state>
	</state>
	<state id="1" initial="init1">
		<invoke type="xmlbridge" id="xmlbridge1"/>
		<state id="init1">
			<datamodel>
				<data id="IDX1"><req>indexes</req></data>
				<data id="READ1">
					<frame xmlns="">
						<data type="requestItem" index="0">information</data>
					</frame>
				</data>
			</datamodel>
			<transition event="1_rREQ" target="sent1">
				<assign location="$IDX1" expr="$_event/data/index"/>
				<send 	event="rCMD"
					namelist="$READ1"
					target="#_xmlbridge1"/>
			</transition>
		</state>
		<state id="sent1">
			<transition event="1_rREPLY"  target="init1">
				<if cond="$_event/data/frame">
					<foreach array="$IDX1/index" item="currIDX1">
						<send 	event="rACK"
							namelist="$_event/data/frame/data/item[@i='${$currIDX1/@listid}']/nestedData[@type='${$currIDX1/text()}']/text()"
							target="#_xmlbridge1"/>
					</foreach>
				<else/>
					<send 	event="rERR"
						target="#_xmlbridge1"/>
				</if>
				<send event="timeout1" delay="5s"/>
			</transition>
			<transition event="timeout1" target="init1">
				<send 	event="_ERR" target="#_xmlbridge1"/>
			</transition>
			<transition event="error1" target="init1">
				<send 	event="_ERR" target="#_xmlbridge1"/>
			</transition>
		</state>
	</state>
	<state id="2" initial="init2">
		<invoke type="xmlbridge" id="xmlbridge2"/>
		<state id="init2">
			<datamodel>
				<data id="IDX2"><req>indexes</req></data>
				<data id="READ2">
					<frame xmlns="">
						<data type="requestItem" index="0">statistic</data>
					</frame>
				</data>
			</datamodel>
			<transition event="2_rREQ" target="sent2">
				<assign location="$IDX2" expr="$_event/data/index"/>
				<send 	event="rCMD"
					namelist="$READ2"
					target="#_xmlbridge2"/>
			</transition>
		</state>
		<state id="sent2">
			<transition event="2_rREPLY"  target="init2">
				<if cond="$_event/data/frame">
					<foreach array="$IDX2/index" item="currIDX2">
						<send 	event="rACK"
							namelist="$_event/data/frame/data/nestedData[@type='statisticList']/item[@i='${$currIDX2/@listid}']/nestedData[@type='${$currIDX2/text()}']/text()"
							target="#_xmlbridge2"/>
					</foreach>
				<else/>
					<send 	event="rERR"
						target="#_xmlbridge2"/>
				</if>
				<send event="timeout2" delay="5s"/>
			</transition>
			<transition event="timeout2" target="init2">
				<send 	event="_ERR" target="#_xmlbridge2"/>
			</transition>
			<transition event="error2" target="init2">
				<send 	event="_ERR" target="#_xmlbridge2"/>
			</transition>
		</state>
	</state>
	<state id="3" initial="init3">
		<invoke type="xmlbridge" id="xmlbridge3"/>
		<state id="init3">
			<datamodel>
				<data id="IDX3"><req>indexes</req></data>
				<data id="READ3">
					<frame xmlns="">
						<data type="requestItem" index="0">temperature</data>
					</frame>
				</data>
			</datamodel>
			<transition event="3_rREQ" target="sent3">
				<assign location="$IDX3" expr="$_event/data/index"/>
				<send 	event="rCMD"
					namelist="$READ3"
					target="#_xmlbridge3"/>
			</transition>
		</state>
		<state id="sent3">
			<transition event="3_rREPLY"  target="init3">
				<if cond="$_event/data/frame">
					<foreach array="$IDX3/index" item="currIDX3">
						<send 	event="rACK"
							namelist="$_event/data/frame/data/item[@i='${$currIDX3/@listid}']/nestedData[@type='${$currIDX3/text()}']/text()"
							target="#_xmlbridge3"/>
					</foreach>
				<else/>
					<send 	event="rERR"
						target="#_xmlbridge3"/>
				</if>
				<send event="timeout3" delay="5s"/>
			</transition>
			<transition event="timeout3" target="init3">
				<send 	event="_ERR" target="#_xmlbridge3"/>
			</transition>
			<transition event="error3" target="init3">
				<send 	event="_ERR" target="#_xmlbridge3"/>
			</transition>
		</state>
	</state>
	<state id="4" initial="init4">
		<invoke type="xmlbridge" id="xmlbridge4"/>
		<state id="init4">
			<datamodel>
				<data id="READ4">
					<frame xmlns="">
						<data type="requestItem" index="0">totalPacks</data>
					</frame>
				</data>
			</datamodel>
			<transition event="4_rREQ" target="sent4">
				<send 	event="rCMD"
					namelist="$READ4"
					target="#_xmlbridge4"/>
			</transition>
		</state>
		<state id="sent4">
			<transition event="4_rREPLY"  target="init4">
				<if cond="$_event/data/frame">
					<send 	event="rACK"
						namelist="$_event/data/frame/data/nestedData[@type='value']/text()"
						target="#_xmlbridge4"/>
				<else/>
					<send 	event="rERR"
						target="#_xmlbridge4"/>
				</if>
				<send event="timeout4" delay="5s"/>
			</transition>
			<transition event="timeout4" target="init4">
				<send 	event="_ERR" target="#_xmlbridge4"/>
			</transition>
			<transition event="error4" target="init4">
				<send 	event="_ERR" target="#_xmlbridge4"/>
			</transition>
		</state>
	</state>
	<state id="5" initial="init5">
		<invoke type="xmlbridge" id="xmlbridge5"/>
		<state id="init5">
			<datamodel>
				<data id="IDX5"><req>indexes</req></data>
				<data id="READ5">
					<frame xmlns="">
						<data type="requestItem" index="0">wrapperError</data>
					</frame>
				</data>
			</datamodel>
			<transition event="5_rREQ" target="sent5">
				<assign location="$IDX5" expr="$_event/data/index"/>
				<send 	event="rCMD"
					namelist="$READ5"
					target="#_xmlbridge5"/>
			</transition>
		</state>
		<state id="sent5">
			<transition event="5_rREPLY"  target="init5">
				<if cond="$_event/data/frame">
					<foreach array="$IDX5/index" item="currIDX5">
						<send 	event="rACK"
							namelist="$_event/data/frame/data/nestedData[@type='${$currIDX5/text()}']/text()"
							target="#_xmlbridge5"/>
					</foreach>

				<else/>
					<send 	event="rERR"
						target="#_xmlbridge5"/>
				</if>
				<send event="timeout5" delay="5s"/>
			</transition>
			<transition event="timeout5" target="init5">
				<send 	event="_ERR" target="#_xmlbridge5"/>
			</transition>
			<transition event="error5" target="init5">
				<send 	event="_ERR" target="#_xmlbridge5"/>
			</transition>
		</state>
	</state>
	<state id="6" initial="init6">
		<invoke type="xmlbridge" id="xmlbridge6"/>
		<state id="init6">
			<datamodel>
				<data id="READ6">
					<frame xmlns="">
			    			<data type="requestItem" index="0">setting</data>
					</frame>
				</data>		
				<data id="WRITE6">
					<frame xmlns="">
					    <data  type="setting" index="0">
						<item  i="3">
						    <nestedData  type="value"> </nestedData>
						</item>
					    </data> 
					</frame>
				</data>
			</datamodel>
			<transition event="6_wReq" target="sent6">
				<assign location="$WRITE6/frame/data/item/nestedData" expr="$_event/data/text()"/>
				<send 	event="6_wCmd"
					namelist="$WRITE6/frame"
					target="#_xmlbridge0"/>
			</transition>
			<transition event="6_rReq" target="sent6">
				<send 	event="6_rCmd"
					namelist="$READ6/frame"
					target="#_xmlbridge0"/>
			</transition>
		</state>
		<state id="sent6">
			<transition event="6_wReply" target="init6">
				<if cond="$_event/data/frame/data/nestedData[@type='state']/text() = 'ok'">
					<send 	event="6_wAck" target="#_xmlbridge0"/>
				<elseif/>
					<send 	event="6__Err" target="#_xmlbridge0"/>
				</if>
			</transition>
			<transition event="6_rReply" target="init6">
				<if cond="$_event/data/frame">
					<send 	event="6_rAck"
						namelist="$_event/data/frame/data/item[@i='3']/nestedData[@type='value']/text()"
						target="#_xmlbridge6"/>
				<else/>
					<send 	event="6__Err" target="#_xmlbridge0"/>
				</if>
			</transition>
			<transition event="timeout6" target="init6">
				<send 	event="6__Err" target="#_xmlbridge0"/>
			</transition>
			<transition event="error6" target="init6">
				<send 	event="6__Err" target="#_xmlbridge0"/>
			</transition>
		</state>
	</state>
	<state id="7" initial="init7">
		<invoke type="xmlbridge" id="xmlbridge7"/>
		<state id="init7">
			<datamodel>
				<data id="READ7">
					<frame xmlns="">
			    			<data type="requestItem" index="0">controls</data>
					</frame>
				</data>

				<data id="WRITE7">
					<frame xmlns="">
					    <data  type="controls" index="0">
						<item  i="3">
						    <nestedData  type="value"> </nestedData>
						</item>
					    </data> 
					</frame>
				</data>
			</datamodel>
			<transition event="7_wReq" target="sent7">
				<assign location="$WRITE7/frame/data/item/nestedData" expr="$_event/data/text()"/>
				<send 	event="7_wCmd"
					namelist="$WRITE7/frame"
					target="#_xmlbridge0"/>
			</transition>
			<transition event="7_rReq" target="sent7">
				<send 	event="7_rCmd"
					namelist="$READ7/frame"
					target="#_xmlbridge0"/>
			</transition>
		</state>
		<state id="sent7">
			<transition event="7_wReply" target="init7">
				<if cond="$_event/data/frame/data/nestedData[@type='state']/text() = 'ok'">
					<send 	event="7_wAck" target="#_xmlbridge0"/>
				<elseif/>
					<send 	event="7__Err" target="#_xmlbridge0"/>
				</if>
			</transition>
			<transition event="7_rReply" target="init7">
				<if cond="$_event/data/frame">
					<send 	event="7_rAck"
						namelist="$_event/data/frame/data/item[@i='3']/nestedData[@type='value']/text()"
						target="#_xmlbridge7"/>
				<else/>
					<send 	event="7__Err" target="#_xmlbridge0"/>
				</if>
			</transition>
			<transition event="timeout7" target="init7">
				<send 	event="7__Err" target="#_xmlbridge0"/>
			</transition>
			<transition event="error7" target="init7">
				<send 	event="7__Err" target="#_xmlbridge0"/>
			</transition>
		</state>
	</state>
	<state id="8" initial="init8">
		<invoke type="xmlbridge" id="xmlbridge8"/>
		<state id="init8">
			<datamodel>
				<data id="READ8">
					<frame xmlns="">
					    <data type="requestItem" index="0">wrapperProgram</data>
					</frame>
				</data>
				<data id="WRITE8">
					<frame xmlns="">
					    <data type="wrapperProgram" index="0">
						<nestedData  type="numWorking">3</nestedData>
					    </data>
					</frame>
				</data>
			</datamodel>
			<transition event="8_wReq" target="sent8">
				<assign location="$WRITE8/frame/data/item/nestedData" expr="$_event/data/text()"/>
				<send 	event="8_wCmd"
					namelist="$WRITE8/frame"
					target="#_xmlbridge0"/>
			</transition>
			<transition event="8_rReq" target="sent8">
				<send 	event="8_rCmd"
					namelist="$READ8/frame"
					target="#_xmlbridge0"/>
			</transition>
		</state>
		<state id="sent8">
			<transition event="8_wReply" target="init8">
				<if cond="$_event/data/frame/data/nestedData[@type='state']/text() = 'ok'">
					<send 	event="8_wAck" target="#_xmlbridge0"/>
				<elseif/>
					<send 	event="8__Err" target="#_xmlbridge0"/>
				</if>
			</transition>
			<transition event="8_rReply" target="init8">
				<if cond="$_event/data/frame">
					<send 	event="8_rAck"
						namelist="$_event/data/frame/data/nestedData[@type='numWorking']/text()"
						target="#_xmlbridge8"/>
				<else/>
					<send 	event="8__Err" target="#_xmlbridge0"/>
				</if>
			</transition>
			<transition event="timeout8" target="init8">
				<send 	event="8__Err" target="#_xmlbridge0"/>
			</transition>
			<transition event="error8" target="init8">
				<send 	event="8__Err" target="#_xmlbridge0"/>
			</transition>
		</state>
	</state>
	<state id="9" initial="init9">
		<invoke type="xmlbridge" id="xmlbridge9"/>
		<state id="init9">
			<data id="READ9">
				<frame xmlns="">
				    <data type="requestItem" index="0">lastError</data>
				</frame>
			</data>
			<transition event="9_rReq" target="sent9">
				<send 	event="9_rCmd"
					namelist="$READ9/frame"
					target="#_xmlbridge0"/>
			</transition>
		</state>
		<state id="sent9">
			<transition event="9_rReply"  target="init9">
				<if cond="$_event/data/frame">
					<send 	event="9_rAck"
						namelist="$_event/data/frame/data/nestedData/item/nestedData[@type='code']/text()"
						target="#_xmlbridge9"/>
				<else/>
					<send 	event="9_rErr"
						target="#_xmlbridge9"/>
				</if>
			</transition>
			<transition event="timeout9" target="init9">
				<send 	event="9__Err" target="#_xmlbridge9"/>
			</transition>
			<transition event="error9" target="init9">
				<send 	event="9__Err" target="#_xmlbridge9"/>
			</transition>
		</state>
	</state>
<!--	<state id="11" initial="init11">-->
<!--		<invoke type="xmlbridge" id="xmlbridge11"/>-->
<!--		<state id="init11">-->
<!--			<transition event="11_rReq" target="sent11">-->
<!--				<send 	event="11_rCmd"-->
<!--					namelist="$READ3/frame"-->
<!--					target="#_xmlbridge11"/>-->
<!--			</transition>-->
<!--			<transition event="11_wReq" target="sent11">-->
<!--				<foreach array="$_event/data/data/text()" item="iterator" index="numRiga">-->
<!--					<assign location="$WRITE11/frame/data/item[@i=$numRiga]/nestedData" expr="$iterator"/>-->
<!--				</foreach>-->
<!--				<send 	event="11_wCmd"-->
<!--					namelist="$WRITE3/frame"-->
<!--					target="#_xmlbridge11"/>-->
<!--			</transition>-->
<!--		</state>-->
<!--		<state id="sent11">-->
<!--			<transition event="11_wReply" target="init11">-->
<!--				<if cond="$_event/data/frame/data/nestedData[@type='state']/text() = 'ok'">-->
<!--					<send 	event="11_wAck" target="#_xmlbridge11"/>-->
<!--				<elseif/>-->
<!--					<send 	event="11__Err" target="#_xmlbridge11"/>-->
<!--				</if>-->
<!--			</transition>-->
<!--			<transition event="11_rReply"  target="init11">-->
<!--				<if cond="$_event/data/frame/data">-->
<!--					<foreach array="$_event/data/data/text()" item="iterator" index="numRiga">-->
<!--						<assign location="$WRITE11/frame/data/item[@i=$numRiga]/nestedData" expr="$iterator"/>-->
<!--					</foreach>-->
<!--					<send 	event="11_rAck"-->
<!--						namelist="$_event/data/frame/data/item/nestedData[@type='value']/text()"-->
<!--						target="#_xmlbridge11"/>-->
<!--				<else/>-->
<!--					<send 	event="11_rErr"-->
<!--						target="#_xmlbridge11"/>-->
<!--				</if>-->
<!--			</transition>-->
<!--			<transition event="timeout11" target="init11">-->
<!--				<send 	event="11__Err" target="#_xmlbridge11"/>-->
<!--			</transition>-->
<!--			<transition event="error3" target="init3">-->
<!--				<send 	event="11__Err" target="#_xmlbridge11"/>-->
<!--			</transition>-->
<!--		</state>-->
<!--	</state>-->
</parallel>
<final id="EXIT">
	<log label="Unrecoverable Error" expr="$_event/text()" />
</final>
</scxml>

<!--
Functions and operators

XPath 1.0 defines four data types: node-sets (sets of nodes with no intrinsic order), strings, numbers and booleans.

The available operators are:

    The "/", "//" and "[...]" operators, used in path expressions, as described above.
    A union operator, "|", which forms the union of two node-sets.
    Boolean operators "and" and "or", and a function "not()"
    Arithmetic operators "+", "-", "*", "div" (divide), and "mod"
    Comparison operators "=", "!=", "<", ">", "<=", ">="

The function library includes:

    Functions to manipulate strings: concat(), substring(), contains(), substring-before(), substring-after(), translate(), normalize-space(), string-length()
    Functions to manipulate numbers: sum(), round(), floor(), ceiling()
    Functions to get properties of nodes: name(), local-name(), namespace-uri()
    Functions to get information about the processing context: position(), last()
    Type conversion functions: string(), number(), boolean()
-->
